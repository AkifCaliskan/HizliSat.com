@using Sahibinden.Business.Model.Advert
@using Newtonsoft.Json
@model AdvertAddModel
@{
	Layout = "_Layout";
}
@using (Html.BeginForm("AddAdvert", "Advert", FormMethod.Post, new { enctype = "multipart/form-data", id = "AddAdvertForm" }))
{
	<div class="container">
		<div class="content">
			@* Kullanıcının kafa karışıklığını önlemek için her şeyi tek bir adımda gösterelim. *@
			<div id="main-form" class="form-step active">
				<h3>İlan Oluştur</h3>
				<div class="form-group">
					@Html.EJS().TextBoxFor(m => m.Name).Width("200px").Placeholder("İlan Adı").Render()
				</div>
				<div class="form-group">
					@Html.EJS().TextAreaFor(m => m.Description).Width("400px").Placeholder("İlan Açıklaması").Render()
				</div>
				<div class="form-group">
					<label>Kategori</label>
					@Html.EJS().DropDownTree("categoryId").Fields(field => field.Value("Id").ParentValue("ParentId").HasChildren("hasChild").Text("Name").DataSource(Model.Categories)).Select("onCategorySelected").Render()
				</div>

				<hr />

				@* Dinamik özellikler bu bölüme yüklenecek *@
				<div id="dynamic-features-section" style="display:none;">
					<h3>İlan Detayları</h3>
					<div id="dynamicFeatureInputs"></div>
				</div>
				<div id="image-upload-section" class="form-group">
					<h3>İlan Fotoğrafları</h3>
					@Html.EJS().Uploader("formFiles").Multiple(true).AutoUpload(false).AllowedExtensions(".jpg, .png, .jpeg").Render()
				</div>

				@* İlan oluşturma butonu her zaman en altta *@
				<div id="submit-section" class="form-group">
					<button type="submit">İlanı Oluştur</button>
				</div>
			</div>
		</div>
	</div>
}


<script>
	function onCategorySelected(args) {
		var selectedCategoryId = args.itemData?.Id || args.itemData?.id;

		const featuresSection = document.getElementById("dynamic-features-section");
		const container = document.getElementById("dynamicFeatureInputs");

		if (!selectedCategoryId) {
			console.error("Seçilen kategori bulunamadı.");
			featuresSection.style.display = "none";
			container.innerHTML = "";
			return;
		}

		fetch('/Advert/GetCategoryFeaturesById/' + parseInt(selectedCategoryId), {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
		})
		.then(response => {
			if (!response.ok) { throw new Error("İstek başarısız."); }
			return response.json();
		})
		.then(data => {
			console.log("Kategoriye ait özellikler:", data);
			container.innerHTML = ""; // Önceki özellikleri temizle

			if (data && data.length > 0) {
				featuresSection.style.display = "block"; // Alanı görünür yap

				data.forEach(feature => {
					const wrapper = document.createElement("div");
					wrapper.className = "form-group";

					const mainLabel = document.createElement("label");
					mainLabel.textContent = feature.name;
					wrapper.appendChild(mainLabel);

					const inputContainer = document.createElement("div");
					wrapper.appendChild(inputContainer);

					// YENİ VE AKILLI MANTIK:
					// Eğer backend'den 'options' listesi geldiyse radyo butonları oluştur.
					if (feature.options && feature.options.length > 0) {
						feature.options.forEach(optionText => {
							const radioInput = document.createElement('input');
							radioInput.type = 'radio';
							radioInput.name = `FeatureValues[${feature.id}]`; // Aynı isimle gruplandır
							radioInput.value = optionText; // Gönderilecek değer

							inputContainer.appendChild(radioInput);

							// Syncfusion RadioButton ile daha şık bir görünüm
							new ej.buttons.RadioButton({
								label: optionText,
								name: `FeatureValues[${feature.id}]`,
								value: optionText
							}).appendTo(radioInput);
						});
					}
					// 'options' listesi yoksa, eski usul inputType'a göre devam et.
					else {
						switch (feature.inputType) {
							case 2: // Int (NumericTextBox)
								const numericInput = document.createElement("input");
								numericInput.type = "text"; // Hata almamak için 'text' olmalı
								numericInput.name = `FeatureValues[${feature.id}]`;
								inputContainer.appendChild(numericInput);
								new ej.inputs.NumericTextBox({
									placeholder: feature.name,
									format: 'n0', value: 0
								}).appendTo(numericInput);
								break;

							case 1: // String (TextBox)
								const textInput = document.createElement("input");
								textInput.type = "text";
								textInput.name = `FeatureValues[${feature.id}]`;
								inputContainer.appendChild(textInput);
								new ej.inputs.TextBox({ placeholder: feature.name }).appendTo(textInput);
								break;

							case 0: // Bool (CheckBox)
								const checkInput = document.createElement("input");
								checkInput.type = "checkbox";
								checkInput.name = `FeatureValues[${feature.id}]`;
								checkInput.value = "true";
								inputContainer.appendChild(checkInput);
								new ej.buttons.CheckBox({
									label: "Evet" // Daha anlamlı bir etiket
								}).appendTo(checkInput);
								break;
						}
					}
					container.appendChild(wrapper);
				});

			} else {
				// Kategoriye ait özellik yoksa, alanı gizle
				featuresSection.style.display = "none";
			}
		})
		.catch(error => {
			console.error("Hata:", error);
		});
	}

</script>
@section PageScripts {
}